; ==============================================================================
; DASCARD'S ASYNCTASKS CONFIGURATION
; ==============================================================================
; Author: dascard
; Email: dascard601@gmail.com
; Description: Comprehensive AsyncTasks configuration for multi-language support
; ==============================================================================

; ------------------------------------------------------------------------------
; Single File Build Tasks | ÂçïÊñá‰ª∂ÁºñËØë‰ªªÂä°
; ------------------------------------------------------------------------------
[file-build]
command:c,cpp = mkdir -p "$(VIM_FILEDIR)/output" && gcc -O2 -Wall -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" -lstdc++ -lm && echo "‚úÖ Build finished successfully"
command:go = go build -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" "$(VIM_FILEPATH)" && echo "‚úÖ Go build finished"
command:rust = mkdir -p "$(VIM_FILEDIR)/output" && rustc --edition 2021 -O "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" && echo "‚úÖ Rust build finished"
command:java = mkdir -p "$(VIM_FILEDIR)/output" && javac -d "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && echo "‚úÖ Java compiled successfully"
command:kotlin = mkdir -p "$(VIM_FILEDIR)/output" && kotlinc "$(VIM_FILEPATH)" -include-runtime -d "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).jar" && echo "‚úÖ Kotlin compiled successfully"
command:scala = mkdir -p "$(VIM_FILEDIR)/output" && scalac -d "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && echo "‚úÖ Scala compiled successfully"
command:cs = mkdir -p "$(VIM_FILEDIR)/output" && mcs -out:"$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).exe" "$(VIM_FILEPATH)" && echo "‚úÖ C# compiled successfully"
command:typescript = mkdir -p "$(VIM_FILEDIR)/output" && tsc --outDir "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && echo "‚úÖ TypeScript compiled successfully"
command:swift = mkdir -p "$(VIM_FILEDIR)/output" && swiftc -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" "$(VIM_FILEPATH)" && echo "‚úÖ Swift compiled successfully"
command:make = make -f "$(VIM_FILEPATH)"
cwd = $(VIM_FILEDIR)
save = 2
output = quickfix
errorformat = %f:%l:%c: %m

; ------------------------------------------------------------------------------
; Single File Run Tasks | ÂçïÊñá‰ª∂ËøêË°å‰ªªÂä°
; ------------------------------------------------------------------------------
[file-run]
command = "$(VIM_FILEPATH)"
command:c,cpp = "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:python = python3 "$(VIM_FILENAME)"
command:sh,bash = bash "$(VIM_FILENAME)"
command:zsh = zsh "$(VIM_FILENAME)"
command:fish = fish "$(VIM_FILENAME)"
command:javascript = node "$(VIM_FILENAME)"
command:typescript = node "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).js"
command:go = "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:rust = "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:java = cd "$(VIM_FILEDIR)/output" && java "$(VIM_FILENOEXT)"
command:kotlin = java -jar "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).jar"
command:scala = cd "$(VIM_FILEDIR)/output" && scala "$(VIM_FILENOEXT)"
command:cs = mono "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).exe"
command:swift = "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:lua = lua "$(VIM_FILENAME)"
command:perl = perl "$(VIM_FILENAME)"
command:php = php "$(VIM_FILENAME)"
command:ruby = ruby "$(VIM_FILENAME)"
command:r = Rscript "$(VIM_FILENAME)"
command:julia = julia "$(VIM_FILENAME)"
command:matlab = matlab -batch "run('$(VIM_FILEPATH)')"
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Build and Run Combined Tasks | ÁºñËØëÂπ∂ËøêË°åÁªÑÂêà‰ªªÂä°
; ------------------------------------------------------------------------------
[file-build-run]
command:c,cpp = mkdir -p "$(VIM_FILEDIR)/output" && gcc -O2 -Wall -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" -lstdc++ -lm && echo "‚úÖ Build finished" && "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:go = go run "$(VIM_FILEPATH)"
command:rust = mkdir -p "$(VIM_FILEDIR)/output" && rustc --edition 2021 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" && "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:java = mkdir -p "$(VIM_FILEDIR)/output" && javac -d "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && cd "$(VIM_FILEDIR)/output" && java "$(VIM_FILENOEXT)"
command:kotlin = mkdir -p "$(VIM_FILEDIR)/output" && kotlinc "$(VIM_FILEPATH)" -include-runtime -d "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).jar" && java -jar "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).jar"
command:scala = mkdir -p "$(VIM_FILEDIR)/output" && scalac -d "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && cd "$(VIM_FILEDIR)/output" && scala "$(VIM_FILENOEXT)"
command:cs = mkdir -p "$(VIM_FILEDIR)/output" && mcs -out:"$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).exe" "$(VIM_FILEPATH)" && mono "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).exe"
command:typescript = mkdir -p "$(VIM_FILEDIR)/output" && tsc --outDir "$(VIM_FILEDIR)/output" "$(VIM_FILEPATH)" && node "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT).js"
command:swift = mkdir -p "$(VIM_FILEDIR)/output" && swiftc -o "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)" "$(VIM_FILEPATH)" && "$(VIM_FILEDIR)/output/$(VIM_FILENOEXT)"
command:python = python3 "$(VIM_FILENAME)"
command:sh,bash = bash "$(VIM_FILENAME)"
command:javascript = node "$(VIM_FILENAME)"
command:lua = lua "$(VIM_FILENAME)"
command:perl = perl "$(VIM_FILENAME)"
command:php = php "$(VIM_FILENAME)"
command:ruby = ruby "$(VIM_FILENAME)"
command:make = make -f "$(VIM_FILEPATH)" && ./a.out
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Debug Build Tasks | Ë∞ÉËØïÁºñËØë‰ªªÂä°
; ------------------------------------------------------------------------------
[file-debug-build]
command:c,cpp = mkdir -p "$(VIM_FILEDIR)/debug" && gcc -g -O0 -Wall -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/debug/$(VIM_FILENOEXT)_debug" -lstdc++ -lm && echo "üêõ Debug build finished"
command:go = go build -gcflags="-N -l" -o "$(VIM_FILEDIR)/debug/$(VIM_FILENOEXT)_debug" "$(VIM_FILEPATH)" && echo "üêõ Go debug build finished"
command:rust = mkdir -p "$(VIM_FILEDIR)/debug" && rustc -g --edition 2021 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/debug/$(VIM_FILENOEXT)_debug" && echo "üêõ Rust debug build finished"
command:java = mkdir -p "$(VIM_FILEDIR)/debug" && javac -g -d "$(VIM_FILEDIR)/debug" "$(VIM_FILEPATH)" && echo "üêõ Java debug build finished"
command:cs = mkdir -p "$(VIM_FILEDIR)/debug" && mcs -debug -out:"$(VIM_FILEDIR)/debug/$(VIM_FILENOEXT)_debug.exe" "$(VIM_FILEPATH)" && echo "üêõ C# debug build finished"
cwd = $(VIM_FILEDIR)
save = 2
output = quickfix
errorformat = %f:%l:%c: %m

; ------------------------------------------------------------------------------
; Test Running Tasks | ÊµãËØïËøêË°å‰ªªÂä°
; ------------------------------------------------------------------------------
[test-run]
command:python = python3 -m pytest "$(VIM_FILENAME)" -v
command:javascript,typescript = npm test
command:go = go test ./...
command:rust = cargo test
command:java = mvn test
command:cs = dotnet test
command:php = ./vendor/bin/phpunit "$(VIM_FILENAME)"
command:ruby = rspec "$(VIM_FILENAME)"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Documentation Generation | ÊñáÊ°£ÁîüÊàê‰ªªÂä°
; ------------------------------------------------------------------------------
[generate-docs]
command:python = python3 -m pydoc -w "$(VIM_FILENOEXT)"
command:javascript,typescript = jsdoc "$(VIM_FILENAME)" -d docs
command:go = godoc -http=:6060
command:rust = cargo doc --open
command:java = javadoc -d docs "$(VIM_FILENAME)"
command:cs = DocFX build
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Linting and Code Quality | ‰ª£Á†ÅÊ£ÄÊü•ÂíåË¥®Èáè‰ªªÂä°
; ------------------------------------------------------------------------------
[lint-check]
command:python = flake8 "$(VIM_FILENAME)" && mypy "$(VIM_FILENAME)" && echo "‚úÖ Python linting passed"
command:javascript = eslint "$(VIM_FILENAME)" && echo "‚úÖ JavaScript linting passed"
command:typescript = tslint "$(VIM_FILENAME)" && echo "‚úÖ TypeScript linting passed"
command:go = golint "$(VIM_FILENAME)" && go vet "$(VIM_FILENAME)" && echo "‚úÖ Go linting passed"
command:rust = cargo clippy && echo "‚úÖ Rust linting passed"
command:java = checkstyle -c /google_checks.xml "$(VIM_FILENAME)" && echo "‚úÖ Java linting passed"
command:cs = dotnet format --verify-no-changes && echo "‚úÖ C# formatting check passed"
command:php = phpcs "$(VIM_FILENAME)" && echo "‚úÖ PHP linting passed"
command:ruby = rubocop "$(VIM_FILENAME)" && echo "‚úÖ Ruby linting passed"
command:shell = shellcheck "$(VIM_FILENAME)" && echo "‚úÖ Shell script linting passed"
cwd = $(VIM_FILEDIR)
output = quickfix
errorformat = %f:%l:%c: %m

; ------------------------------------------------------------------------------
; Code Formatting Tasks | ‰ª£Á†ÅÊ†ºÂºèÂåñ‰ªªÂä°
; ------------------------------------------------------------------------------
[format-code]
command:python = black "$(VIM_FILENAME)" && isort "$(VIM_FILENAME)" && echo "‚úÖ Python code formatted"
command:javascript,typescript = prettier --write "$(VIM_FILENAME)" && echo "‚úÖ JS/TS code formatted"
command:go = gofmt -w "$(VIM_FILENAME)" && echo "‚úÖ Go code formatted"
command:rust = rustfmt "$(VIM_FILENAME)" && echo "‚úÖ Rust code formatted"
command:java = google-java-format --replace "$(VIM_FILENAME)" && echo "‚úÖ Java code formatted"
command:cs = dotnet format "$(VIM_FILEPATH)" && echo "‚úÖ C# code formatted"
command:cpp,c = clang-format -i "$(VIM_FILENAME)" && echo "‚úÖ C/C++ code formatted"
command:php = php-cs-fixer fix "$(VIM_FILENAME)" && echo "‚úÖ PHP code formatted"
command:ruby = rubocop -a "$(VIM_FILENAME)" && echo "‚úÖ Ruby code formatted"
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Package Management Tasks | ÂåÖÁÆ°ÁêÜ‰ªªÂä°
; ------------------------------------------------------------------------------
[install-deps]
command:python = pip install -r requirements.txt && echo "‚úÖ Python dependencies installed"
command:javascript,typescript = npm install && echo "‚úÖ Node.js dependencies installed"
command:go = go mod download && echo "‚úÖ Go modules downloaded"
command:rust = cargo fetch && echo "‚úÖ Rust dependencies fetched"
command:java = mvn dependency:resolve && echo "‚úÖ Maven dependencies resolved"
command:cs = dotnet restore && echo "‚úÖ .NET packages restored"
command:php = composer install && echo "‚úÖ PHP dependencies installed"
command:ruby = bundle install && echo "‚úÖ Ruby gems installed"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; CMake Project Tasks | CMake È°πÁõÆ‰ªªÂä°
; ------------------------------------------------------------------------------
[cmake-init]
command = mkdir -p "$(VIM_ROOT)/build" && cd "$(VIM_ROOT)/build" && cmake -DCMAKE_BUILD_TYPE=Release .. && echo "‚úÖ CMake project initialized"
cwd = $(VIM_ROOT)
save = 2
errorformat = %f:%l:%c: %m
output = quickfix

[cmake-debug-init]
command = mkdir -p "$(VIM_ROOT)/build" && cd "$(VIM_ROOT)/build" && cmake -DCMAKE_BUILD_TYPE=Debug .. && echo "üêõ CMake debug project initialized"
cwd = $(VIM_ROOT)
save = 2
errorformat = %f:%l:%c: %m
output = quickfix

[cmake-build]
command = cd "$(VIM_ROOT)/build" && make -j$(nproc) && echo "‚úÖ CMake build finished"
cwd = $(VIM_ROOT)
save = 2
errorformat = %f:%l:%c: %m
output = quickfix

[cmake-clean]
command = cd "$(VIM_ROOT)/build" && make clean && echo "‚úÖ CMake clean finished"
cwd = $(VIM_ROOT)
output = terminal

[cmake-install]
command = cd "$(VIM_ROOT)/build" && make install && echo "‚úÖ CMake install finished"
cwd = $(VIM_ROOT)
output = terminal

[cmake-run]
command = "$(VIM_ROOT)/build/$(VIM_PRONAME)"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Git Operations | Git Êìç‰Ωú‰ªªÂä°
; ------------------------------------------------------------------------------
[git-status]
command = git status --porcelain
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[git-add-commit]
command = git add . && git commit -m "Auto commit from Vim" && echo "‚úÖ Changes committed"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[git-push]
command = git push origin $(git branch --show-current) && echo "‚úÖ Changes pushed to remote"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[git-pull]
command = git pull origin $(git branch --show-current) && echo "‚úÖ Changes pulled from remote"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Docker Tasks | Docker ‰ªªÂä°
; ------------------------------------------------------------------------------
[docker-build]
command = docker build -t $(VIM_PRONAME):latest . && echo "‚úÖ Docker image built"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[docker-run]
command = docker run --rm -it $(VIM_PRONAME):latest
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[docker-compose-up]
command = docker-compose up -d && echo "‚úÖ Docker Compose services started"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[docker-compose-down]
command = docker-compose down && echo "‚úÖ Docker Compose services stopped"
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; Web Development Tasks | Web ÂºÄÂèë‰ªªÂä°
; ------------------------------------------------------------------------------
[web-dev-server]
command:javascript,typescript = npm run dev
command:python = python3 -m http.server 8000
command:php = php -S localhost:8000
command:ruby = ruby -run -e httpd . -p 8000
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

[web-build]
command:javascript,typescript = npm run build && echo "‚úÖ Web project built"
command:python = python3 setup.py build
cwd = $(VIM_ROOT)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; LaTeX and Document Processing | LaTeX ÂíåÊñáÊ°£Â§ÑÁêÜ‰ªªÂä°
; ------------------------------------------------------------------------------
[latex-compile]
command:tex,latex = pdflatex "$(VIM_FILENAME)" && echo "‚úÖ LaTeX compiled to PDF"
command:typst = typst compile "$(VIM_FILENAME)" && echo "‚úÖ Typst compiled to PDF"
cwd = $(VIM_FILEDIR)
output = quickfix
errorformat = %f:%l: %m

[latex-clean]
command = rm -f *.aux *.log *.out *.toc *.bbl *.blg *.fls *.fdb_latexmk *.synctex.gz && echo "‚úÖ LaTeX auxiliary files cleaned"
cwd = $(VIM_FILEDIR)
output = terminal

[markdown-preview]
command = pandoc "$(VIM_FILENAME)" -o "$(VIM_FILENOEXT).html" && xdg-open "$(VIM_FILENOEXT).html" && echo "‚úÖ Markdown preview generated"
cwd = $(VIM_FILEDIR)
output = terminal

; ------------------------------------------------------------------------------
; Special Language Tasks | ÁâπÊÆäËØ≠Ë®Ä‰ªªÂä°
; ------------------------------------------------------------------------------
[typst-compile]
command = typst compile "$(VIM_FILENAME)" && echo "‚úÖ Typst document compiled"
cwd = $(VIM_FILEDIR)
output = quickfix
errorformat = %f:%l:%c: %m

[typst-watch]
command = typst watch "$(VIM_FILENAME)" && echo "üëÅÔ∏è Typst watch mode started"
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

[jupyter-run]
command = jupyter nbconvert --execute --to notebook --inplace "$(VIM_FILENAME)" && echo "‚úÖ Jupyter notebook executed"
cwd = $(VIM_FILEDIR)
output = terminal
pos = floaterm

; ------------------------------------------------------------------------------
; System Information Tasks | Á≥ªÁªü‰ø°ÊÅØ‰ªªÂä°
; ------------------------------------------------------------------------------
[system-info]
command = echo "üìä System Information:" && uname -a && echo "üíæ Memory:" && free -h && echo "üíΩ Disk:" && df -h
output = terminal
pos = floaterm

[performance-monitor]
command = htop
output = terminal
pos = floaterm

; ==============================================================================
; End of AsyncTasks Configuration
; ==============================================================================
